# Use an official Node.js runtime as the base image
FROM node:18 AS builder

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./

# Install Angular CLI
RUN npm install -g @angular/cli@15.0.0

# Install dependencies
RUN npm install

# Copy the rest of the application code to the working directory
COPY . .

# Build the Angular application
RUN npm run build

# Use Nginx as the base image for serving the Angular application
FROM nginx:alpine

# Remove the default Nginx configuration file
RUN rm /etc/nginx/conf.d/default.conf

# Inline Nginx configuration
RUN echo "server {" > /etc/nginx/conf.d/nginx.conf \
    && echo "    listen 80;" >> /etc/nginx/conf.d/nginx.conf \
    && echo "    server_name localhost;" >> /etc/nginx/conf.d/nginx.conf \
    && echo "    root /usr/share/nginx/html;" >> /etc/nginx/conf.d/nginx.conf \
    && echo "    index index.html;" >> /etc/nginx/conf.d/nginx.conf \
    && echo "    location / {" >> /etc/nginx/conf.d/nginx.conf \
    && echo "        try_files \$uri \$uri/ /index.html;" >> /etc/nginx/conf.d/nginx.conf \
    && echo "        add_header Access-Control-Allow-Origin *;" >> /etc/nginx/conf.d/nginx.conf \
    && echo "    }" >> /etc/nginx/conf.d/nginx.conf \
    && echo "}" >> /etc/nginx/conf.d/nginx.conf

# Copy the built Angular application from the builder stage to the Nginx web server directory
COPY --from=builder /app/dist /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Command to run Nginx
CMD ["nginx", "-g", "daemon off;"]

